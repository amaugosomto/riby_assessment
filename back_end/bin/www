#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('savers-app:server');
var http = require('http');
const moment = require('moment');
const notification = require('../controllers/notification.controller');
const server_model = require('../models/server.model');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}


(function caller() {
  var today = moment();
  var end_of_day = moment().endOf('day');
  var secs = end_of_day.diff(today, 'second');
  var id = '5be5bba45f4bf4194db172b1';

  if (secs == 0) {
    setTimeout(function () {
      server_model.findById(id, (err, server) => {
        if (err) console.log('An error occured');
        let end_of_day = moment().endOf('day');
        server.date = end_of_day;

        server.save((err, server) => {
          if (err) console.log('An error occured while trying to save');
        })
      });
      console.log('first');
      notification();
      caller();
    }, 2000);
  } else {

    server_model.findById(id, (err, server) => {
      let old_date = moment(server.date);
      let new_date = moment();
      let sec = old_date.diff(new_date, 'second');
      let diff = old_date.diff(new_date, 'millisecond');

      if (sec <= 0) {
        setTimeout(function () {
          notification();
          server.date = moment().endOf('day');

          server.save((err, server) => {
            if (err) console.log('An error occured while trying to save');
          });
          console.log('second');
          return caller();
        }, 1000);
      } else {

        setTimeout(function () {
          setTimeout(function () {
            notification();
            server.date = moment().endOf('day');

            server.save((err) => {
              if (err) console.log('An error occured while trying to save');
            });
            console.log('third')
            return caller();
          }, 2000)
        }, diff);
      }
    });

  }

})();